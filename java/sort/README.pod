=encoding utf8

=pod

=head1 sort for Array of Int Type

 Arrays.sort(arr);

 public static void SortArrayInDesc(int[] arr) {
    Arrays.sort(arr);

    int l = 0;
    int r = arr.length-1;
    
    while ( l < r ) {
        int tmp = arr[l];
        arr[l] = arr[r];
        arr[r] = tmp;
        l++;
        r--;
    }
 }

=head1 sort for List<Scalar>

 Collections.sort(list);

 Collections.sort(list, Collections.reverseOrder());

=head1 sort for List<Object>

 Collections.sort(list, new Comparator<Object>() {
     @Override
     public int compare(Object o1, Object o2) {
         return Integer.compare(((Obj) o1).a, ((Obj) o2).b);
     }
 });

 // 또는 Object 를 다음처럼 구현

 /*
 class Object implements Comparable<Object> {
    @Override
    public int compareTo(Object s) {
        return 0;
    }
 }
 */

 // reverse 는 compare return 값을 뒤집어 주자.

=head1 Count Sort

	public static void main(String[] args) {

		// 0-7
		int[] data = new int[]{
			0,4,1,3,1,2,4,1,7
		};
		// allocating array for sorted data
		int[] sortedData = new int[data.length];

		// for 0-7
		int sizeOfRange = 8;
		int[] counts = new int[sizeOfRange];

		// counting each datum
		for (int i=0; i<data.length; i++) {
			counts[data[i]]++;
		}

		// step-by-step summing
		for ( int i=1; i<counts.length; i++ ) {
			counts[i] = counts[i] + counts[i-1];
		}

		for ( int i=0; i<data.length; i++ ) {
			int idx = --counts[data[i]];
			sortedData[idx] = data[i];
		}

		System.out.println();

		sc.close();
	}


=cut
